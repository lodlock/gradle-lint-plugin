/*
 * Copyright 2014-2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    id 'com.gradle.plugin-publish' version '0.9.4'
    id 'nebula.plugin-plugin' version '4.21.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

description 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'

contacts {
    'jkschneider@gmail.com' {
        moniker 'Jon Schneider'
        github 'jkschneider'
    }
}

repositories {
    maven {
        url 'https://repo.eclipse.org/content/groups/jgit/'
    }
    mavenCentral()
}

// Write the lint plugin's classes to a file to share with testKit
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text =
                sourceSets.main.runtimeClasspath.findAll { !it.name.contains('xerces') }.join('\n')
    }
}

configurations {
    plugin.description = 'The compile dependencies for the plugin, excluding the local dependencies to avoid problems with Shadow'
    compile.extendsFrom plugin
}

dependencies {
    plugin 'org.ow2.asm:asm:5.0.4'
    plugin('org.codenarc:CodeNarc:latest.release') {
        transitive = false
    }
    plugin 'com.netflix.nebula:gradle-info-plugin:3.0.4'
    plugin 'commons-lang:commons-lang:2.6'

    plugin ('org.eclipse.jgit:org.eclipse.jgit:4.4.0-SNAPSHOT') {
        transitive = false
    }

    plugin 'org.codehaus.gpars:gpars:1.2.1'

    // these two dependencies exist so we can provide a test harness
    // to proprietary rule implementations packed in other jars, but are considered provided
    plugin ('org.spockframework:spock-core:latest.release') { transitive = false }
    plugin('com.netflix.nebula:nebula-test:3.1.0') { transitive = false }

    testCompile gradleTestKit()
    testCompile ('org.spockframework:spock-core:latest.release') {
        exclude module: 'groovy-all'
    }
    testCompile 'org.ow2.asm:asm-util:5.0.4'

    // Add the classpath file to the test runtime classpath
    testRuntime files(createClasspathManifest)
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/gradle-lint-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/gradle-lint-plugin.git'
    description = 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'

    plugins {
        dependencyLock {
            id = 'nebula.lint'
            displayName = 'Nebula Lint plugin'
            description = 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'
            tags = ['nebula', 'lint']
        }
    }

    mavenCoordinates {
        groupId = 'com.netflix.nebula'
        artifactId = 'gradle-lint-plugin'
    }
}

// Relocate jgit dependency not available in Maven Central
// Replaces the main artifact by removing the classifier for the shadow jar, and replacing jar with shadowJar
// Relocated dependencies are removed from the generated pom
shadowJar {
    configurations = [project.configurations.plugin]
    classifier = null
    dependencies {
        include(dependency('org.eclipse.jgit:org.eclipse.jgit'))
        include(dependency('commons-lang:commons-lang'))
        include(dependency('org.codenarc:CodeNarc'))
    }
    relocate 'org.eclipse.jgit', 'com.netflix.nebula.lint.jgit'
    relocate 'org.apache.commons.lang', 'com.netflix.nebula.lint.commons.lang'
    relocate 'org.codenarc', 'com.netflix.nebula.lint.org.codenarc'

    // powerassert is packed inside codenarc without relocation for some reason
    relocate 'org.codehaus.groovy.transform.powerassert', 'com.netflix.nebula.lint.org.codehaus.groovy.transform.powerassert'
}

jar.deleteAllActions()
jar.dependsOn shadowJar

publishing {
    publications {
        nebula(MavenPublication) {
            pom.withXml {
                asNode()
                    .dependencies
                    .dependency
                    .findAll {
                        // JGit is shaded inside the distribution, and we want the others to act as 'provided'
                        ['org.eclipse.jgit', 'spock-core', 'nebula-test', 'CodeNarc'].contains(it.artifactId.text())
                    }
                    .each { it.parent().remove(it) }
            }
        }
    }
}
